/* MIT License
 *
 * Copyright (c) 2017 Brandon Dooley - dooleyb1@tcd.ie
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#define NUM_PHIL 5

bool pthinking[NUM_PHIL] = false;
bool phungry[NUM_PHIL] = false;
bool peating[NUM_PHIL] = false;
int forks[NUM_PHIL] = -1;

init{
	atomic{
		int i = 0;

		do
		:: i < NUM_PHIL ->
			run P(i);
			i++;

		:: else -> 
			break;
		od;
	}
}

proctype P(int i){
	
	int right = i;
	int left = (i+1)%NUM_PHIL;

think:
	atomic{
		peating[i] = false;
		pthinking[i] = true;
	};

hungry:
	atomic{
		pthinking[i] = false;
		phungry[i] = true;
	};
	if
	:: skip;
		atomic { forks[left] == -1 -> forks[left] = i};
		atomic { forks[right] == -1 -> forks[right] = i};
	:: skip;
		atomic { forks[right] == -1 -> forks[right] = i};
		atomic { forks[left] == -1 -> forks[left] = i};
	fi;

eating:
	atomic {
		phungry[i] = false;
		peating[i] = true;
	};

done:
	forks[right] = -1;
	forks[left] = -1;
	goto think;
}