library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity memory is
    Port ( 
            address : in std_logic_vector(15 downto 0);
            data_in : in std_logic_vector(15 downto 0);
            Clk : in std_logic;
            MW : in std_logic;
            data_out : out std_logic_vector(15 downto 0)
    );
end memory;

architecture Behavioral of memory is

type mem_array is array(0 to 511) of std_logic_vector(15 downto 0);
-- define type, for memory arrays

begin
mem_process: process (address, data_in)
    
    -- initialize data memory, X denotes hexadecimal number
    variable data_mem : mem_array := (
    
    --0
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --16
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --32
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --48
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --64
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --80
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --96
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --112
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",    
    
    --128    
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --144
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --160
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --176
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --192
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --208
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --224
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --240
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",  

    --256
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --272
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --288
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --304
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --320
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --336
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --352
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --368
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",    
    
    --384
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --400
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --416
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --432
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --448
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --464
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    
    --480
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",

    --496
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000",
    X"0000", X"0000", X"0000",X"0000");
        
    variable addr:integer;
    
    begin 
        --Convert address to integer index
        addr:=conv_integer(address(8 downto 0));
        
        --If MW = 1 write data_in to Memory[addr]
        if MW = '1' and Clk = '1' then
        data_mem(addr):= data_in;
        
        --If MW = 0 read from Memory[addr] to data_out
        elsif MW = '0' and Clk = '1' then
        data_out <= data_mem(addr) after 10 ns;
        end if;

end process;
end Behavioral;
